"""rebuild our generated glyph data lookups.

These are generated by extracting information from glyphsLib. See README.md
in this file's parent directory for an overview.

Usage:
    python resources/scripts/non_spacing_marks.py && cargo fmt
"""

import glyphsLib
from glyphsLib.glyphdata import GlyphData
from importlib import resources
import os
import shutil
import subprocess

TARGET_DIR = "glyphs2fontir/glyphdata"


def glyph_data():
    files = resources.files(glyphsLib)
    with (
        files.joinpath("data/GlyphData.xml").open("rb") as f1,
        files.joinpath("data/GlyphData_Ideographs.xml").open("rb") as f2,
    ):
        return GlyphData.from_files(f1, f2)


def reformat_subcategory(raw):
    if raw == "Decimal Digit":
        return "DecimalDigit"
    if raw == "Spacing Combining":
        return "SpacingCombining"
    return raw

# these are alternative glyph names that shadow another glyph's base name
BAD_ALT_NAMES = {"perpendicular", "compass", }

def filter_alt_name(name) -> bool:
     return not (name in BAD_ALT_NAMES)

def codegen_lookup_items(file):
    for name, attrib in glyph_data().names.items():
        names = [name]
        if "altNames" in attrib:
            names.extend( n for n in attrib["altNames"].replace(" ", "").split(",") if filter_alt_name(n) )

        category = attrib.get("category")
        subcategory = reformat_subcategory(attrib.get("subCategory"))
        for name in names:
            file.write(f"{name}, GlyphInfo::new(Category::{category}, Subcategory::{subcategory})\n")

def run_rust_codegen_tool(in_path, out_path):
    with open(out_path, "w") as f:
        subprocess.run(["cargo", "run", "--example", "run_phf_codegen", in_path], stdout=f)

def main(_):
    # this script writes preformatted text to this path
    codegen_input_path = os.path.join(TARGET_DIR, "extracted_glyph_data.txt")
    # we run a little rust program that generates code at this temp path
    temp_out_path = os.path.join(TARGET_DIR, "temp_glyph_data.rs")
    # which goes to this final path, which is `include!`ed in fontdrasil
    final_path = os.path.join(TARGET_DIR, "generated_glyph_data.rs")
    # we can't write directly to the final path because we truncate to write
    # and then the text is erased which means fontdrasil can't compile

    with open(codegen_input_path, "w") as f:
        codegen_lookup_items(f)

    run_rust_codegen_tool(codegen_input_path, temp_out_path)
    shutil.copy(temp_out_path, final_path)

    os.remove(codegen_input_path)
    os.remove(temp_out_path)


if __name__ == "__main__":
    main(None)
